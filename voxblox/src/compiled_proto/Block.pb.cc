// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voxblox/Block.proto

#include "voxblox/Block.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace voxblox {
class BlockProtoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockProto>
      _instance;
} _BlockProto_default_instance_;
}  // namespace voxblox
namespace protobuf_voxblox_2fBlock_2eproto {
static void InitDefaultsBlockProto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::voxblox::_BlockProto_default_instance_;
    new (ptr) ::voxblox::BlockProto();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::voxblox::BlockProto::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BlockProto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBlockProto}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_BlockProto.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::voxblox::BlockProto, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::voxblox::BlockProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::voxblox::BlockProto, voxels_per_side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::voxblox::BlockProto, voxel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::voxblox::BlockProto, origin_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::voxblox::BlockProto, origin_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::voxblox::BlockProto, origin_z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::voxblox::BlockProto, has_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::voxblox::BlockProto, voxel_data_),
  2,
  0,
  1,
  4,
  5,
  3,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::voxblox::BlockProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::voxblox::_BlockProto_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "voxblox/Block.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023voxblox/Block.proto\022\007voxblox\"\225\001\n\nBlock"
      "Proto\022\027\n\017voxels_per_side\030\001 \001(\005\022\022\n\nvoxel_"
      "size\030\002 \001(\001\022\020\n\010origin_x\030\003 \001(\001\022\020\n\010origin_y"
      "\030\004 \001(\001\022\020\n\010origin_z\030\005 \001(\001\022\020\n\010has_data\030\006 \001"
      "(\010\022\022\n\nvoxel_data\030\007 \003(\r"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "voxblox/Block.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_voxblox_2fBlock_2eproto
namespace voxblox {

// ===================================================================

void BlockProto::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockProto::kVoxelsPerSideFieldNumber;
const int BlockProto::kVoxelSizeFieldNumber;
const int BlockProto::kOriginXFieldNumber;
const int BlockProto::kOriginYFieldNumber;
const int BlockProto::kOriginZFieldNumber;
const int BlockProto::kHasDataFieldNumber;
const int BlockProto::kVoxelDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockProto::BlockProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_voxblox_2fBlock_2eproto::scc_info_BlockProto.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:voxblox.BlockProto)
}
BlockProto::BlockProto(const BlockProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      voxel_data_(from.voxel_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&voxel_size_, &from.voxel_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_z_) -
    reinterpret_cast<char*>(&voxel_size_)) + sizeof(origin_z_));
  // @@protoc_insertion_point(copy_constructor:voxblox.BlockProto)
}

void BlockProto::SharedCtor() {
  ::memset(&voxel_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_z_) -
      reinterpret_cast<char*>(&voxel_size_)) + sizeof(origin_z_));
}

BlockProto::~BlockProto() {
  // @@protoc_insertion_point(destructor:voxblox.BlockProto)
  SharedDtor();
}

void BlockProto::SharedDtor() {
}

void BlockProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BlockProto::descriptor() {
  ::protobuf_voxblox_2fBlock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_voxblox_2fBlock_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BlockProto& BlockProto::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_voxblox_2fBlock_2eproto::scc_info_BlockProto.base);
  return *internal_default_instance();
}


void BlockProto::Clear() {
// @@protoc_insertion_point(message_clear_start:voxblox.BlockProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voxel_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&voxel_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_z_) -
        reinterpret_cast<char*>(&voxel_size_)) + sizeof(origin_z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlockProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:voxblox.BlockProto)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 voxels_per_side = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_voxels_per_side();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voxels_per_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double voxel_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_voxel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voxel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double origin_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_origin_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &origin_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double origin_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_origin_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &origin_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double origin_z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_origin_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &origin_z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_data = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_has_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 voxel_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_voxel_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_voxel_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:voxblox.BlockProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:voxblox.BlockProto)
  return false;
#undef DO_
}

void BlockProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:voxblox.BlockProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 voxels_per_side = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->voxels_per_side(), output);
  }

  // optional double voxel_size = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->voxel_size(), output);
  }

  // optional double origin_x = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->origin_x(), output);
  }

  // optional double origin_y = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->origin_y(), output);
  }

  // optional double origin_z = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->origin_z(), output);
  }

  // optional bool has_data = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_data(), output);
  }

  // repeated uint32 voxel_data = 7;
  for (int i = 0, n = this->voxel_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->voxel_data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:voxblox.BlockProto)
}

::google::protobuf::uint8* BlockProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:voxblox.BlockProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 voxels_per_side = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->voxels_per_side(), target);
  }

  // optional double voxel_size = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->voxel_size(), target);
  }

  // optional double origin_x = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->origin_x(), target);
  }

  // optional double origin_y = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->origin_y(), target);
  }

  // optional double origin_z = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->origin_z(), target);
  }

  // optional bool has_data = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_data(), target);
  }

  // repeated uint32 voxel_data = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->voxel_data_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:voxblox.BlockProto)
  return target;
}

size_t BlockProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:voxblox.BlockProto)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 voxel_data = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->voxel_data_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->voxel_data_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional double voxel_size = 2;
    if (has_voxel_size()) {
      total_size += 1 + 8;
    }

    // optional double origin_x = 3;
    if (has_origin_x()) {
      total_size += 1 + 8;
    }

    // optional int32 voxels_per_side = 1;
    if (has_voxels_per_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voxels_per_side());
    }

    // optional bool has_data = 6;
    if (has_has_data()) {
      total_size += 1 + 1;
    }

    // optional double origin_y = 4;
    if (has_origin_y()) {
      total_size += 1 + 8;
    }

    // optional double origin_z = 5;
    if (has_origin_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:voxblox.BlockProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BlockProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:voxblox.BlockProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:voxblox.BlockProto)
    MergeFrom(*source);
  }
}

void BlockProto::MergeFrom(const BlockProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:voxblox.BlockProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  voxel_data_.MergeFrom(from.voxel_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      voxel_size_ = from.voxel_size_;
    }
    if (cached_has_bits & 0x00000002u) {
      origin_x_ = from.origin_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      voxels_per_side_ = from.voxels_per_side_;
    }
    if (cached_has_bits & 0x00000008u) {
      has_data_ = from.has_data_;
    }
    if (cached_has_bits & 0x00000010u) {
      origin_y_ = from.origin_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      origin_z_ = from.origin_z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:voxblox.BlockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockProto::CopyFrom(const BlockProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:voxblox.BlockProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockProto::IsInitialized() const {
  return true;
}

void BlockProto::Swap(BlockProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockProto::InternalSwap(BlockProto* other) {
  using std::swap;
  voxel_data_.InternalSwap(&other->voxel_data_);
  swap(voxel_size_, other->voxel_size_);
  swap(origin_x_, other->origin_x_);
  swap(voxels_per_side_, other->voxels_per_side_);
  swap(has_data_, other->has_data_);
  swap(origin_y_, other->origin_y_);
  swap(origin_z_, other->origin_z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BlockProto::GetMetadata() const {
  protobuf_voxblox_2fBlock_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_voxblox_2fBlock_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace voxblox
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::voxblox::BlockProto* Arena::CreateMaybeMessage< ::voxblox::BlockProto >(Arena* arena) {
  return Arena::CreateInternal< ::voxblox::BlockProto >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
